# -*- coding: utf-8 -*-
"""análise_exploratória_porte_medio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rbpmtb4DkQKj3hn84DYRC2fM7k2ToI7d

Importando bibliotecas
"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pylab import rcParams
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

"""Adiciona caminho do dataset"""

dataset = pd.read_csv('/content/drive/My Drive/Projeto Internações/Preparação dos dados/dataset_internacoes_completo.csv')

dataset

dataset['populacao'].dtype

def porte(populacao):
  if populacao <= 20000:
    return 'Pequeno Porte I'
  elif populacao >= 20001 and populacao <= 50000 :
    return 'Pequeno Porte II'
  elif populacao >= 50001 and populacao <= 100000:
    return 'Médio Porte'
  elif populacao >= 100001 and populacao <= 900000:
    return 'Grande Porte'
  elif populacao >= 900001:
    return 'Metrópole'

def taxa_internacao (row):
  return row['Qtd. internacoes']*1000/row['populacao']

dataset['taxa_internacao'] = dataset.apply(taxa_internacao, axis =1)

dataset['Porte'] = dataset['populacao'].apply(porte)

dataset

"""Filtra dataset por médio porte"""

dataset = dataset[dataset['Porte'] == 'Médio Porte']

dataset

time_series = dataset[['Data completa', 'taxa_internacao']]
time_series['Data completa'] = pd.to_datetime(time_series['Data completa'])

time_series = time_series.set_index('Data completa').resample('M').mean()

time_series.describe()

time_series.hist()
plt.title('Taxa de Internações')

plt.plot(time_series)
plt.title('Taxa de Internações')
plt.ylabel('Taxa Internações')
plt.xlabel('Data')
plt.show()

"""[texto do link](https://)#Decomposição da série"""

from statsmodels.tsa.seasonal import seasonal_decompose
result = seasonal_decompose(time_series, model='aditive')

result.plot()
plt.show()

"""#Teste de Estacionariedade"""

from statsmodels.tsa.stattools import adfuller

X = time_series['taxa_internacao']
result = adfuller(X)
print('ADF Estatíticas: %f' % result[0])
print('Valor de P: %f' % result[1])
print('Valores Críticos:')
for key, value in result[4].items():
   print('\t%s: %.3f' % (key, value))

"""#Tornando a série estacionária (Diferenciação)"""

xdiff = X.diff()
xdiff = xdiff.dropna()

xlabel='Data'
xdiff.plot()

result = adfuller(xdiff)
print('ADF Estatíticas: %f' % result[0])
print('Valor de P: %f' % result[1])
print('Valores Críticos:')
for key, value in result[4].items():
   print('\t%s: %.3f' % (key, value))

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
plot_acf(X)
plt.show()

!pip freeze > requirements.txt